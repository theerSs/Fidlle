// <auto-generated />
using System;
using Fidlle.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fidlle.Infrastructure.Migrations.Quests
{
    [DbContext(typeof(QuestsContext))]
    partial class QuestsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fidlle.Domain.Entities.Backpack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Backpack");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.CharacterSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterSkill");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.EquipmentSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ItemId1")
                        .HasColumnType("uuid");

                    b.Property<int>("SlotType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId1");

                    b.ToTable("EquipmentSlot");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BackpackId")
                        .HasColumnType("uuid");

                    b.Property<int>("DamageModifier")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DexterityModifier")
                        .HasColumnType("integer");

                    b.Property<int>("HealthModifier")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceModifier")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<int>("ManaModifier")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StrengthModifier")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BackpackId");

                    b.HasIndex("InventoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Quest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateAccepted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TraderQuestId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("TraderQuestId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Trader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Traders");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.TraderQuest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ReputationReward")
                        .HasColumnType("real");

                    b.Property<Guid>("TraderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TraderId");

                    b.ToTable("TraderQuests");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Backpack", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Character", "Character")
                        .WithOne("Backpack")
                        .HasForeignKey("Fidlle.Domain.Entities.Backpack", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Character", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.CharacterSkill", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.EquipmentSlot", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Character", "Character")
                        .WithMany("EquipmentSlots")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fidlle.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId1");

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Inventory", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Character", "Character")
                        .WithOne("Inventory")
                        .HasForeignKey("Fidlle.Domain.Entities.Inventory", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Item", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Backpack", null)
                        .WithMany("Items")
                        .HasForeignKey("BackpackId");

                    b.HasOne("Fidlle.Domain.Entities.Inventory", null)
                        .WithMany("Items")
                        .HasForeignKey("InventoryId");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Quest", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Character", "Character")
                        .WithMany("Quest")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fidlle.Domain.Entities.TraderQuest", "TraderQuest")
                        .WithMany("Quests")
                        .HasForeignKey("TraderQuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("TraderQuest");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.TraderQuest", b =>
                {
                    b.HasOne("Fidlle.Domain.Entities.Trader", "Trader")
                        .WithMany("Quests")
                        .HasForeignKey("TraderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trader");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Backpack", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Character", b =>
                {
                    b.Navigation("Backpack")
                        .IsRequired();

                    b.Navigation("EquipmentSlots");

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.Trader", b =>
                {
                    b.Navigation("Quests");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.TraderQuest", b =>
                {
                    b.Navigation("Quests");
                });

            modelBuilder.Entity("Fidlle.Domain.Entities.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
